@page "/huffman"
@using System.Collections
@using Compression
@rendermode InteractiveServer

<PageTitle>Huffman</PageTitle>

<div class="container-fluid my-2">
    <div class="card">
        <div class="card-body">
            <h3 class="card-header">Huffman</h3>
            <hr />
            <div class="border-2">
                <label>Sıkıştırılacak metni giriniz: </label>
                <input type="text" @bind="text"  class="form-control" />

                <button class="btn btn-primary" @onclick="Compress">Sıkıştır</button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid my-2">
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-header">Frekans</h3>
                    <hr/>
                    <table class="table">
                        <tbody>
                            @foreach (var kvp in frequencyTable)
                            {
                                <tr>
                                    <td>@kvp.Key</td>
                                    <td>@kvp.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-header">HuffmanBasic Tablosu</h3>
                    <hr />
                    <table class="table">
                        <thead>
                            <th>Karakter</th>
                            <th>Kod</th>
                            <th>Uzunluk</th>
                        </thead>
                        <tbody>
                            @foreach (var table in huffmanTable)
                            {
                                <tr>
                                    <td>@table.Key</td>
                                    <td>@(Convert.ToString((long)table.Value.code,2).PadLeft(table.Value.length, '0'))</td>
                                    <td>@table.Value.length</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-header">Sıkıştırılmış Veri</h3>
                    <hr />
                    <ul class="list-group">
                        <li class="list-group-item">
                            <p class="fw-bold">Sıkıştırılmış veri:</p> @compressedText
                        </li>
                        <li class="list-group-item">
                            <p class="fw-bold">Encoded Data:</p> @(string.Join(" ", (from e in encodedData.Item1 select e.ToString("b").PadLeft(encodedData.totalBits))))
                        </li>
                        <li class="list-group-item">
                            <p class="fw-bold">Asıl Veri Uzunluğu:</p> @(text.Length)
                        </li>
                        <li class="list-group-item">
                            <p class="fw-bold">Sıkıştırılmış Veri Uzunluğu:</p> @(encodedData.Item1.Count * sizeof(byte))
                        </li>
                        <li class="list-group-item">
                            <p class="fw-bold">Çözümlenmiş veri:</p> @decompressedText
                        </li>
                    </ul>

                </div>
            </div>
        </div>
    </div>


</div>

@code {
    private string text = "ANKARA";

    (List<byte>, int totalBits) encodedData = new(new List<byte>(), 0);
    public Dictionary<string, int> frequencyTable = new Dictionary<string, int>();
    Dictionary<string, (ulong code, int length)> huffmanTable = new Dictionary<string, (ulong code, int length)>();

    string compressedText = string.Empty;
    string decompressedText = string.Empty;

    public async Task Compress()
    {
        encodedData = new(new List<byte>(), 0);
        compressedText = String.Empty;
        decompressedText = String.Empty;

        var huffman = new Huffman();
        encodedData = await huffman.Compress(text,1);
        compressedText = string.Join("", encodedData.Item1);
        decompressedText = huffman.Decode(encodedData.Item1, encodedData.totalBits, huffman.RootHuffmanNode);
        frequencyTable = huffman.frequencyTable;
        huffmanTable = huffman.huffmanTable;
    }
}

