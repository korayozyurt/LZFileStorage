@page "/huffman"
@rendermode InteractiveServer

<PageTitle>Huffman</PageTitle>

<div class="container-fluid my-2">
    <div class="card">
        <div class="card-body">
            <h3 class="card-header">Huffman</h3>
            <hr />
            <div class="border-2">
                <label>Sıkıştırılacak metni giriniz: </label>
                <input type="text" @bind="text"  class="form-control" />
                
                <button class="btn btn-primary" @onclick="Compress">Sıkıştır</button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid my-2">
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-header">Frekans</h3>
                    <hr/>
                    <table class="table">
                        <tbody>
                        @foreach (var kvp in frequencyTable)
                        {
                            <tr>
                                <td>@kvp.Key</td>
                                <td>@kvp.Value</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-header">Huffman Tablosu</h3>
                    <hr />
                    <table class="table">
                        <tbody>
                        @foreach (var table in huffmanTable)
                        {
                            <tr>
                                <td>@table.Key</td>
                                    <td>@table.Value</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-header">Sıkıştırılmış Veri</h3>
                    <hr />
                    <ul class="list-group">
                        <li class="list-group-item">
                            <p class="fw-bold">Sıkıştırılmış veri:</p> @compressedText
                        </li>
                        <li class="list-group-item">
                            <p class="fw-bold">Asıl Veri Uzunluğu:</p> @text.Length
                        </li>
                        <li class="list-group-item">
                            <p class="fw-bold">Sıkıştırılmış Veri Uzunluğu:</p> @compressedText.Length
                        </li>
                    </ul>
                    
                </div>
            </div>
        </div>
    </div>
    

</div>

@code {
    private string text = "ANKARA";

    private PriorityQueue<HuffmanNode, int> nodeList = new PriorityQueue<HuffmanNode, int>();
    Dictionary<char, int> frequencyTable = new Dictionary<char, int>();
    Dictionary<char, string> huffmanTable = new Dictionary<char, string>();

    private string compressedText = string.Empty;

    public async Task Compress()
    {
        Console.WriteLine(text);
        var frequencies = CalculateFrequency(text);
        var huffmanTree = BuildHuffmanTree();
        GenerateHuffmanCodes(huffmanTree, "", huffmanTable);

        compressedText = string.Join("", text.Select(t => huffmanTable[t]).ToList());

        Console.WriteLine(frequencies);
    }

    private Dictionary<char, int> CalculateFrequency(string text)
    {
        frequencyTable = new Dictionary<char, int>();
        foreach (char c in text)
        {
            if (!frequencyTable.ContainsKey(c)) { frequencyTable.Add(c, 1); continue; }

            frequencyTable[c]++;
        }
        frequencyTable = frequencyTable.OrderByDescending(d => d.Value).ToDictionary();
        return frequencyTable;
    }

    private void GenerateHuffmanCodes(HuffmanNode node, string currentCode, Dictionary<char, string> huffmanTable)
    {
        if (node == null) return;
        if(node.character != '\0')
        {
            node.code = currentCode;
            huffmanTable[node.character] = currentCode;
        }

        GenerateHuffmanCodes(node.left, currentCode + "0", huffmanTable);
        GenerateHuffmanCodes(node.right, currentCode + "1", huffmanTable);

    }

    private HuffmanNode BuildHuffmanTree()
    {
        nodeList = new PriorityQueue<HuffmanNode, int>();
        foreach (var frequency in frequencyTable)
        {
            nodeList.Enqueue(new HuffmanNode(){character = frequency.Key, Frequency = frequency.Value},frequency.Value);
        }

        while (nodeList.Count > 1)
        {
            var left = nodeList.Dequeue();
            var right = nodeList.Dequeue();

            var parent = new HuffmanNode() {left = left, right = right,Frequency = left.Frequency + right.Frequency };
            nodeList.Enqueue(parent, parent.Frequency);
        }

        return nodeList.Peek();
    }

    class HuffmanNode
    {
        public char character { get; set; }
        public string code { get; set; }
        public int Frequency { get; set; }
        public HuffmanNode left { get; set; }
        public HuffmanNode right { get; set; }
    }
}

