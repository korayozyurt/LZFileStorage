@page "/fileUpload"
@using LZAlgorithms
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>File Upload</PageTitle>


<h3>FileUpload</h3>
<InputFile OnChange="Loadfiles" multiple></InputFile>

<a href="https://en.wikipedia.org/wiki/Data_compression_ratio">Compression ratio</a>

@if(IsLoading)
{
    <p>Loading...</p>
}


@code {

    public bool IsLoading = false;

    private long maxFileSize = 1024 * 1024 * 50; //50 MB

    private async Task Loadfiles(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync("SwalLoading");
        IsLoading = true;
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                // Create directory if not exist
                var uploadPath = Path.Combine("D:/", "upload");
                if (!Directory.Exists(uploadPath))
                {
                    Directory.CreateDirectory(uploadPath);
                }
                var path = Path.Combine(uploadPath, file.Name);

                var compressedFileName = Path.GetFileNameWithoutExtension(file.Name) + ".kry";
                var compressedPath = Path.Combine(uploadPath, compressedFileName);

                var decompressedPath = Path.Combine(uploadPath, $"decompressed_{file.Name}");

                // dosyayı normal kaydet
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                // dosyayı byte olarak al
                using var ms = new MemoryStream();
                await file.OpenReadStream(maxFileSize).CopyToAsync(ms);
                var fileBytes = ms.ToArray();

                // compress and save
                var lz77 = new LZ77();
                var compressedByteTupple = lz77.Compress(fileBytes, 8192, 32);
                lz77.WriteToFile(compressedPath, compressedByteTupple);

                var rededTupple = lz77.ReadFromFile(compressedPath);
                var decompressedBytes = lz77.Decompress(rededTupple);

                await File.WriteAllBytesAsync(decompressedPath, decompressedBytes);

                await JS.InvokeVoidAsync("SwalClose");

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                IsLoading = false;
            }
            

        }
    }

}
